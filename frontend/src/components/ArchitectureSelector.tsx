import React from 'react'
import { PromptArchitecture } from '../types/api'

interface ArchitectureSelectorProps {
  selected: PromptArchitecture
  onSelect: (architecture: PromptArchitecture) => void
}

const architectures = [
  {
    id: 'auto' as PromptArchitecture,
    name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä',
    description: '–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É',
    icon: 'üéØ'
  },
  {
    id: '5_tier' as PromptArchitecture,
    name: '5-—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫',
    description: 'Role ‚Üí Task ‚Üí Context ‚Üí Examples ‚Üí Reminders',
    icon: 'üèóÔ∏è'
  },
  {
    id: 'chain_of_thought' as PromptArchitecture,
    name: 'Chain-of-Thought',
    description: '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
    icon: 'üîó'
  },
  {
    id: 'zero_shot' as PromptArchitecture,
    name: 'Zero-shot',
    description: '–ë–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤, —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
    icon: '‚ö°'
  },
  {
    id: 'few_shot' as PromptArchitecture,
    name: 'Few-shot',
    description: '–° –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è',
    icon: 'üìö'
  },
  {
    id: 'emotional' as PromptArchitecture,
    name: 'EmotionPrompting',
    description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    icon: 'üí°'
  },
  {
    id: 'structured' as PromptArchitecture,
    name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
    description: '–ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    icon: 'üìã'
  }
]

export const ArchitectureSelector: React.FC<ArchitectureSelectorProps> = ({
  selected,
  onSelect,
}) => {
  return (
    <div className="card p-6">
      <h3 className="text-lg font-semibold mb-4 text-gray-900">
        –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
      </h3>
      
      <div className="grid grid-cols-1 gap-3">
        {architectures.map((arch) => (
          <label key={arch.id} className="cursor-pointer">
            <input
              type="radio"
              name="architecture"
              value={arch.id}
              checked={selected === arch.id}
              onChange={() => onSelect(arch.id)}
              className="sr-only"
            />
            <div
              className={`p-4 rounded-lg border-2 transition-all ${
                selected === arch.id
                  ? 'border-primary-500 bg-primary-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="flex items-start space-x-3">
                <span className="text-2xl">{arch.icon}</span>
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">{arch.name}</h4>
                  <p className="text-sm text-gray-600 mt-1">{arch.description}</p>
                </div>
                <div
                  className={`w-5 h-5 rounded-full border-2 transition-colors ${
                    selected === arch.id
                      ? 'border-primary-500 bg-primary-500'
                      : 'border-gray-300'
                  }`}
                >
                  {selected === arch.id && (
                    <div className="w-full h-full rounded-full bg-white scale-[0.4]" />
                  )}
                </div>
              </div>
            </div>
          </label>
        ))}
      </div>
    </div>
  )
} 